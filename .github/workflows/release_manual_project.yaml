name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Type of release (major, minor, patch)
        type: choice
        options:
          - major
          - minor
          - patch
        required: true
      release_note:
        description: Enter the release note.
        required: true
      version:
        description: Manually specify version (optional, overrides release_type)
        required: false

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      id: release
      step: increment_version

    steps:
      - uses: actions/checkout@v3

      - name: Get Previous Release Version
        id: get_previous_release
        run: |
          PREVIOUS_RELEASE_VERSION=$(gh release list --limit 1 --json number --jq .[0])
          echo "::set-output name=previous_release_version::${PREVIOUS_RELEASE_VERSION}"

      - name: Increment Version (if applicable)
        id: increment_version  # This step sets the output
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            CURRENT_VERSION=$(echo "${{ github.event.inputs.version }}" | tr -d 'v')  # Remove any leading 'v'
            PREVIOUS_RELEASE_VERSION=$(echo "${{ steps.get_previous_release.outputs.previous_release_version }}" | tr -d 'v')

            if [[ "$CURRENT_VERSION" <= "$PREVIOUS_RELEASE_VERSION" ]]; then
              echo "::error::Input version (${github.event.inputs.version}) is less than or equal to previous release version ($PREVIOUS_RELEASE_VERSION). Release aborted."
              exit 1
            fi

            NEW_VERSION="${{ github.event.inputs.version }}"
          else
            # Calculate next version based on release type
            NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --no-git-tag-version --prefix . --allow-same-version)
          fi
          echo "::set-output name=new_version::${NEW_VERSION}"

      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ success() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ steps.increment_version.outputs.new_version }}"
          release_name: "${{ steps.increment_version.outputs.new_version }}"
          body: |
            Release note for version ${{ steps.increment_version.outputs.new_version }} : ${{ github.event.inputs.release_note }}
