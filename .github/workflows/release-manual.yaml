name: Create Module Release

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: Name of the module to release
        type: choice
        options:
          - simple_storage
          - simple_network
        required: true
      release_type:
        description: Type of release (major, minor, patch)
        type: choice
        options:
          - major
          - minor
          - patch
        required: true
      version:
        description: Manually specify version (optional, overrides release_type)
        required: false

jobs:
  create_release:
    runs-on: ubuntu-latest

    outputs:
      id: release
      step: create_release

    steps:
      - uses: actions/checkout@v3

      - name: Set Release Variables
        id: set_release_variables
        run: |
          if [[ -z "${{ github.event.inputs.version }}" ]]; then
            # Calculate next version without updating package.json
            NEW_VERSION=$(npm version ${{ github.event.inputs.release_type }} --prefix modules/${{ github.event.inputs.module_name }} --no-git-tag-version)
          else
            NEW_VERSION=${{ github.event.inputs.version }}
          fi
          COMBINED_NAME_AND_VERSION="${{ github.event.inputs.module_name }} $NEW_VERSION"
          echo "::set-output name=tag_name::${COMBINED_NAME_AND_VERSION}"
          echo "::set-output name=release_name::Release ${COMBINED_NAME_AND_VERSION}"
          echo "::set-output name=new_version::${NEW_VERSION}"

      - name: Create Release
        id: create_release
        run: echo "Creating release"

      - name: Upload Release Asset
        run: echo "Uploading release asset"

      - name: Set Tag Name
        run: echo "Setting tag name"
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        with:
          tag_name: ${{ steps.set_release_variables.outputs.tag_name }}
          release_name: ${{ steps.set_release_variables.outputs.release_name }}
          body: |
            Release notes for ${{ github.event.inputs.module_name }} v${{ steps.set_release_variables.outputs.new_version }}
          upload_url: ${{ steps.create_release.outputs.upload_url }}

      - name: Zip Module
        run: zip -r "${{ steps.set_release_variables.outputs.tag_name }}.zip" modules/${{ github.event.inputs.module_name }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "${{ steps.set_release_variables.outputs.tag_name }}.zip"
          asset_name: "${{ steps.set_release_variables.outputs.tag_name }}.zip"
          asset_content_type: application/zip
